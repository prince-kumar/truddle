[{"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/index.tsx":"1","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/App.tsx":"2","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/constants.tsx":"3","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/data/answers.tsx":"4","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/EndGameModal.tsx":"5","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/data/words.tsx":"6","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/SettingsModal.tsx":"7","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/InfoModal.tsx":"8","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/Keyboard.tsx":"9","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/hooks/useLocalStorage.tsx":"10","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/index.tsx":"11","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/App.tsx":"12","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/constants.tsx":"13","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/data/answers.tsx":"14","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/data/words.tsx":"15","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/InfoModal.tsx":"16","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/Keyboard.tsx":"17","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/SettingsModal.tsx":"18","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/EndGameModal.tsx":"19","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/hooks/useLocalStorage.tsx":"20"},{"size":163,"mtime":1714919214930,"results":"21","hashOfConfig":"22"},{"size":15944,"mtime":1714935273740,"results":"23","hashOfConfig":"22"},{"size":494,"mtime":1714919214925,"results":"24","hashOfConfig":"22"},{"size":368,"mtime":1714934926148,"results":"25","hashOfConfig":"22"},{"size":5748,"mtime":1714934565249,"results":"26","hashOfConfig":"22"},{"size":444,"mtime":1714934923158,"results":"27","hashOfConfig":"22"},{"size":3944,"mtime":1714919614829,"results":"28","hashOfConfig":"22"},{"size":2865,"mtime":1714930126978,"results":"29","hashOfConfig":"22"},{"size":3831,"mtime":1714919214925,"results":"30","hashOfConfig":"22"},{"size":770,"mtime":1714919214930,"results":"31","hashOfConfig":"22"},{"size":163,"mtime":1714919214930,"results":"32","hashOfConfig":"33"},{"size":15944,"mtime":1714935273740,"results":"34","hashOfConfig":"33"},{"size":494,"mtime":1714919214925,"results":"35","hashOfConfig":"33"},{"size":368,"mtime":1714934926148,"results":"36","hashOfConfig":"33"},{"size":444,"mtime":1714934923158,"results":"37","hashOfConfig":"33"},{"size":2865,"mtime":1714930126978,"results":"38","hashOfConfig":"33"},{"size":3831,"mtime":1714919214925,"results":"39","hashOfConfig":"33"},{"size":3944,"mtime":1714919614829,"results":"40","hashOfConfig":"33"},{"size":5748,"mtime":1714934565249,"results":"41","hashOfConfig":"33"},{"size":770,"mtime":1714919214930,"results":"42","hashOfConfig":"33"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qdnh9x",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xpgr7k",{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/index.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/App.tsx",["84"],"import { letters, status } from './constants'\nimport { useEffect, useState } from 'react'\n\nimport { EndGameModal } from './components/EndGameModal'\nimport { InfoModal } from './components/InfoModal'\nimport { Keyboard } from './components/Keyboard'\nimport { SettingsModal } from './components/SettingsModal'\nimport answers from './data/answers'\nimport { useLocalStorage } from './hooks/useLocalStorage'\nimport { ReactComponent as Info } from './data/Info.svg'\nimport { ReactComponent as Settings } from './data/Settings.svg'\nconst words = require('./data/words').default as { [key: string]: boolean }\n\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost',\n}\n\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard',\n}\n\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length)\n  return answers[randomIndex].toUpperCase()\n}\n\ntype State = {\n  answer: () => string\n  questions: string[]\n  gameState: string\n  board: string[][]\n  cellStatuses: string[][]\n  currentRow: number\n  currentCol: number\n  letterStatuses: () => { [key: string]: string }\n  submittedInvalidWord: boolean\n  darkMode: boolean\n}\n\nfunction App() {\n  const initialStates: State = {\n\n    questions: [\"guess the city \", \"Guess the river name \",\"Guess the food name\"], \n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n    ],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses: { [key: string]: string } = {}\n      letters.forEach((letter) => {\n        letterStatuses[letter] = status.unguessed\n      })\n      return letterStatuses\n    },\n    submittedInvalidWord: false,\n    darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n  }\n\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer())\n  const [question, setQuestion] = useState(initialStates.questions[Math.floor(Math.random()*initialStates.questions.length)]);\n  \n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState)\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board)\n  const [cellStatuses, setCellStatuses] = useLocalStorage(\n    'stateCellStatuses',\n    initialStates.cellStatuses\n  )\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow)\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol)\n  const [letterStatuses, setLetterStatuses] = useLocalStorage(\n    'stateLetterStatuses',\n    initialStates.letterStatuses()\n  )\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage(\n    'stateSubmittedInvalidWord',\n    initialStates.submittedInvalidWord\n  )\n\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0)\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0)\n  const [modalIsOpen, setIsOpen] = useState(false)\n\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true)\n  const [guessesInStreak, setGuessesInStreak] = useLocalStorage(\n    'guesses-in-streak',\n    firstTime ? 0 : -1\n  )\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime)\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false)\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal)\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters'\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\"\n    } else {\n      return 'Guess any valid word'\n    }\n  }\n  const eg: { [key: number]: string } = {}\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  const handleInfoClose = () => {\n    setFirstTime(false)\n    setInfoModalIsOpen(false)\n  }\n\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', initialStates.darkMode)\n  const toggleDarkMode = () => setDarkMode((prev: boolean) => !prev)\n\n  useEffect(\n    () => document.documentElement.classList[darkMode ? 'add' : 'remove']('dark'),\n    [darkMode]\n  )\n\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal()\n      }, 500)\n    }\n  }, [gameState])\n\n  const getCellStyles = (rowNumber: number, colNumber: number, letter: string) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${\n          submittedInvalidWord ? 'border border-red-800' : ''\n        }`\n      }\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50'\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50'\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50'\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n  }\n\n  const addLetter = (letter: string) => {\n    setSubmittedInvalidWord(false)\n    setBoard((prev: string[][]) => {\n      if (currentCol > 4) {\n        return prev\n      }\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol] = letter\n      return newBoard\n    })\n    if (currentCol < 5) {\n      setCurrentCol((prev: number) => prev + 1)\n    }\n  }\n\n  // returns an array with a boolean of if the word is valid and an error message if it is not\n  const isValidWord = (word: string): [boolean] | [boolean, string] => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`]\n    if (difficultyLevel === difficulty.easy) return [true]\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`]\n    if (difficultyLevel === difficulty.normal) return [true]\n    const guessedLetters = Object.entries(letterStatuses).filter(([letter, letterStatus]) =>\n      [status.yellow, status.green].includes(letterStatus)\n    )\n    const yellowsUsed = guessedLetters.every(([letter, _]) => word.includes(letter))\n    const greensUsed = Object.entries(exactGuesses).every(\n      ([position, letter]) => word[parseInt(position)] === letter\n    )\n    if (!yellowsUsed || !greensUsed)\n      return [false, `In hard mode, you must use all the hints you've been given.`]\n    return [true]\n  }\n\n  const onEnterPress = () => {\n    const word = board[currentRow].join('')\n    const [valid, _err] = isValidWord(word)\n    if (!valid) {\n      console.log({ valid, _err })\n      setSubmittedInvalidWord(true)\n      // alert(_err)\n      return\n    }\n\n    if (currentRow === 6) return\n\n    updateCellStatuses(word, currentRow)\n    updateLetterStatuses(word)\n    setCurrentRow((prev: number) => prev + 1)\n    setCurrentCol(0)\n\n    // Only calculate guesses in streak if they've\n    // started a new streak since this feature was added.\n    if (guessesInStreak >= 0) {\n      setGuessesInStreak((prev: number) => prev + 1)\n    }\n  }\n\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false)\n    if (currentCol === 0) return\n\n    setBoard((prev: any) => {\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol - 1] = ''\n      return newBoard\n    })\n\n    setCurrentCol((prev: number) => prev - 1)\n  }\n\n  const updateCellStatuses = (word: string, rowNumber: number) => {\n    const fixedLetters: { [key: number]: string } = {}\n    setCellStatuses((prev: any) => {\n      const newCellStatuses = [...prev]\n      newCellStatuses[rowNumber] = [...prev[rowNumber]]\n      const wordLength = word.length\n      const answerLetters: string[] = answer.split('')\n\n      // set all to gray\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray\n      }\n\n      // check greens\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green\n          answerLetters.splice(i, 1)\n          fixedLetters[i] = answer[i]\n        }\n      }\n\n      // check yellows\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1)\n        }\n      }\n\n      return newCellStatuses\n    })\n    setExactGuesses((prev: { [key: number]: string }) => ({ ...prev, ...fixedLetters }))\n  }\n\n  const isRowAllGreen = (row: string[]) => {\n    return row.every((cell: string) => cell === status.green)\n  }\n\n  const avgGuessesPerGame = (): number => {\n    if (currentStreak > 0) {\n      return guessesInStreak / currentStreak\n    } else {\n      return 0\n    }\n  }\n\n  // every time cellStatuses updates, check if the game is won or lost\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses]\n    const reversedStatuses = cellStatusesCopy.reverse()\n    const lastFilledRow = reversedStatuses.find((r) => {\n      return r[0] !== status.unguessed\n    })\n\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won)\n\n      var streak = currentStreak + 1\n      setCurrentStreak(streak)\n      setLongestStreak((prev: number) => (streak > prev ? streak : prev))\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost)\n      setCurrentStreak(0)\n    }\n  }, [\n    cellStatuses,\n    currentRow,\n    gameState,\n    setGameState,\n    currentStreak,\n    setCurrentStreak,\n    setLongestStreak,\n  ])\n\n  const updateLetterStatuses = (word: string) => {\n    setLetterStatuses((prev: { [key: string]: string }) => {\n      const newLetterStatuses = { ...prev }\n      const wordLength = word.length\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue\n\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow\n        } else {\n          newLetterStatuses[word[i]] = status.gray\n        }\n      }\n      return newLetterStatuses\n    })\n  }\n\n  const playAgain = () => {\n    if (gameState === state.lost) {\n      setGuessesInStreak(0)\n    }\n\n    setAnswer(initialStates.answer())\n    setGameState(initialStates.gameState)\n    setBoard(initialStates.board)\n    setCellStatuses(initialStates.cellStatuses)\n    setCurrentRow(initialStates.currentRow)\n    setCurrentCol(initialStates.currentCol)\n    setLetterStatuses(initialStates.letterStatuses())\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord)\n    setExactGuesses({})\n\n    closeModal()\n  }\n\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99,\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${\n        darkMode\n          ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C'\n          : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'\n      }`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative',\n    },\n  }\n\n  return (\n    <div>\n      <div className={`flex flex-col justify-between h-fill bg-background dark:bg-background-dark`}>\n        <header className=\"flex flex-row justify-between py-2 px-3 text-primary dark:text-primary-dark\">\n          <button\n            type=\"button\"\n            onClick={() => setSettingsModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Settings />\n          </button>\n          <div>\n\n          <h1 className=\" text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\">\n            Truddle\n          </h1>\n          <h2 className=\" text-center text-xl tracking-wide font-bold font-righteous mt-3\">\n          { question}\n          </h2>\n            \n          </div>\n \n          <button\n            type=\"button\"\n            onClick={() => setInfoModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Info />\n          </button>\n        </header>\n        <div className=\"flex items-center flex-col py-3 flex-1 justify-center relative\">\n          <div className=\"relative\">\n            <div className=\"grid grid-cols-5 grid-flow-row gap-4\">\n              {board.map((row: string[], rowNumber: number) =>\n                row.map((letter: string, colNumber: number) => (\n                  <span\n                    key={colNumber}\n                    className={`${getCellStyles(\n                      rowNumber,\n                      colNumber,\n                      letter\n                    )} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`}\n                  >\n                    {letter}\n                  </span>\n                ))\n              )}\n            </div>\n            <div\n              className={`absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${\n                gameState === state.playing ? 'hidden' : ''\n              }`}\n            >\n              <div className={darkMode ? 'dark' : ''}>\n                <button\n                  autoFocus\n                  type=\"button\"\n                  className=\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\"\n                  onClick={playAgain}\n                >\n                  Play Again\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <InfoModal\n          isOpen={infoModalIsOpen}\n          handleClose={handleInfoClose}\n          darkMode={darkMode}\n          styles={modalStyles}\n        />\n        <EndGameModal\n          isOpen={modalIsOpen}\n          handleClose={closeModal}\n          styles={modalStyles}\n          darkMode={darkMode}\n          gameState={gameState}\n          state={state}\n          currentStreak={currentStreak}\n          longestStreak={longestStreak}\n          answer={answer}\n          playAgain={playAgain}\n          avgGuessesPerGame={avgGuessesPerGame()}\n        />\n        <SettingsModal\n          isOpen={settingsModalIsOpen}\n          handleClose={() => setSettingsModalIsOpen(false)}\n          styles={modalStyles}\n          darkMode={darkMode}\n          toggleDarkMode={toggleDarkMode}\n          difficultyLevel={difficultyLevel}\n          setDifficultyLevel={setDifficultyLevel}\n          levelInstructions={getDifficultyLevelInstructions()}\n        />\n        <div className={`h-auto relative ${gameState === state.playing ? '' : 'invisible'}`}>\n          <Keyboard\n            letterStatuses={letterStatuses}\n            addLetter={addLetter}\n            onEnterPress={onEnterPress}\n            onDeletePress={onDeletePress}\n            gameDisabled={gameState !== state.playing}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/constants.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/data/answers.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/EndGameModal.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/data/words.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/SettingsModal.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/InfoModal.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/components/Keyboard.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/hooks/useLocalStorage.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/index.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/App.tsx",["85"],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/constants.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/data/answers.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/data/words.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/InfoModal.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/Keyboard.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/SettingsModal.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/components/EndGameModal.tsx",[],"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/src/hooks/useLocalStorage.tsx",[],{"ruleId":"86","severity":1,"message":"87","line":73,"column":20,"nodeType":"88","messageId":"89","endLine":73,"endColumn":31},{"ruleId":"86","severity":1,"message":"87","line":73,"column":20,"nodeType":"88","messageId":"89","endLine":73,"endColumn":31},"@typescript-eslint/no-unused-vars","'setQuestion' is assigned a value but never used.","Identifier","unusedVar"]