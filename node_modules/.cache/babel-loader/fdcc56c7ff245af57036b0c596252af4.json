{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useCallback, useMemo, createContext, useRef, useContext, Fragment } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\nvar _reducers;\nvar DisclosureStates;\n(function (DisclosureStates) {\n  DisclosureStates[DisclosureStates[\"Open\"] = 0] = \"Open\";\n  DisclosureStates[DisclosureStates[\"Closed\"] = 1] = \"Closed\";\n})(DisclosureStates || (DisclosureStates = {}));\nvar ActionTypes;\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"ToggleDisclosure\"] = 0] = \"ToggleDisclosure\";\n  ActionTypes[ActionTypes[\"CloseDisclosure\"] = 1] = \"CloseDisclosure\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 2] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 3] = \"SetPanelId\";\n  ActionTypes[ActionTypes[\"LinkPanel\"] = 4] = \"LinkPanel\";\n  ActionTypes[ActionTypes[\"UnlinkPanel\"] = 5] = \"UnlinkPanel\";\n})(ActionTypes || (ActionTypes = {}));\nvar reducers = (_reducers = {}, _reducers[ActionTypes.ToggleDisclosure] = function (state) {\n  var _match;\n  return _extends({}, state, {\n    disclosureState: match(state.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))\n  });\n}, _reducers[ActionTypes.CloseDisclosure] = function (state) {\n  if (state.disclosureState === DisclosureStates.Closed) return state;\n  return _extends({}, state, {\n    disclosureState: DisclosureStates.Closed\n  });\n}, _reducers[ActionTypes.LinkPanel] = function (state) {\n  if (state.linkedPanel === true) return state;\n  return _extends({}, state, {\n    linkedPanel: true\n  });\n}, _reducers[ActionTypes.UnlinkPanel] = function (state) {\n  if (state.linkedPanel === false) return state;\n  return _extends({}, state, {\n    linkedPanel: false\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar DisclosureContext = /*#__PURE__*/createContext(null);\nDisclosureContext.displayName = 'DisclosureContext';\nfunction useDisclosureContext(component) {\n  var context = useContext(DisclosureContext);\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n  return context;\n}\nvar DisclosureAPIContext = /*#__PURE__*/createContext(null);\nDisclosureAPIContext.displayName = 'DisclosureAPIContext';\nfunction useDisclosureAPIContext(component) {\n  var context = useContext(DisclosureAPIContext);\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext);\n    throw err;\n  }\n  return context;\n}\nvar DisclosurePanelContext = /*#__PURE__*/createContext(null);\nDisclosurePanelContext.displayName = 'DisclosurePanelContext';\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext);\n}\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\nvar DEFAULT_DISCLOSURE_TAG = Fragment;\nfunction Disclosure(props) {\n  var _match2;\n  var _props$defaultOpen = props.defaultOpen,\n    defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n    passthroughProps = _objectWithoutPropertiesLoose(props, [\"defaultOpen\"]);\n  var buttonId = \"headlessui-disclosure-button-\" + useId();\n  var panelId = \"headlessui-disclosure-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId: buttonId,\n    panelId: panelId\n  });\n  var disclosureState = reducerBag[0].disclosureState,\n    dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.CloseDisclosure\n    });\n    var restoreElement = function () {\n      if (!focusableElement) return document.getElementById(buttonId);\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return document.getElementById(buttonId);\n    }();\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, buttonId]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: disclosureState === DisclosureStates.Open,\n      close: close\n    };\n  }, [disclosureState, close]);\n  return React.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, React.createElement(DisclosureAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(disclosureState, (_match2 = {}, _match2[DisclosureStates.Open] = State.Open, _match2[DisclosureStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: passthroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: 'Disclosure'\n  }))));\n} // ---\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button.name].join('.')),\n    state = _useDisclosureContext[0],\n    dispatch = _useDisclosureContext[1];\n  var internalButtonRef = useRef(null);\n  var buttonRef = useSyncRefs(internalButtonRef, ref);\n  var panelContext = useDisclosurePanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var handleKeyDown = useCallback(function (event) {\n    var _document$getElementB;\n    if (isWithinPanel) {\n      if (state.disclosureState === DisclosureStates.Closed) return;\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ToggleDisclosure\n          });\n          (_document$getElementB = document.getElementById(state.buttonId)) == null ? void 0 : _document$getElementB.focus();\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ToggleDisclosure\n          });\n          break;\n      }\n    }\n  }, [dispatch, isWithinPanel, state.disclosureState]);\n  var handleKeyUp = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n    if (isWithinPanel) {\n      var _document$getElementB2;\n      dispatch({\n        type: ActionTypes.ToggleDisclosure\n      });\n      (_document$getElementB2 = document.getElementById(state.buttonId)) == null ? void 0 : _document$getElementB2.focus();\n    } else {\n      dispatch({\n        type: ActionTypes.ToggleDisclosure\n      });\n    }\n  }, [dispatch, props.disabled, state.buttonId, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var type = useResolveButtonType(props, internalButtonRef);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    ref: buttonRef,\n    type: type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: type,\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel.name].join('.')),\n    state = _useDisclosureContext2[0],\n    dispatch = _useDisclosureContext2[1];\n  var _useDisclosureAPICont = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.')),\n    close = _useDisclosureAPICont.close;\n  var panelRef = useSyncRefs(ref, function () {\n    if (state.linkedPanel) return;\n    dispatch({\n      type: ActionTypes.LinkPanel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n    return state.disclosureState === DisclosureStates.Open;\n  }(); // Unlink on \"unmount\" myself\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n    if (state.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    }\n  }, [state.disclosureState, props.unmount, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId\n  };\n  var passthroughProps = props;\n  return React.createElement(DisclosurePanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Disclosure.Panel'\n  }));\n}); // ---\n\nDisclosure.Button = Button;\nDisclosure.Panel = Panel;\nexport { Disclosure };","map":{"version":3,"sources":["/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/node_modules/@headlessui/react/src/components/disclosure/disclosure.tsx"],"names":["DisclosureStates","ActionTypes","reducers","ToggleDisclosure","state","disclosureState","match","Open","Closed","CloseDisclosure","LinkPanel","linkedPanel","UnlinkPanel","SetButtonId","action","buttonId","SetPanelId","panelId","DisclosureContext","createContext","displayName","useDisclosureContext","component","context","useContext","err","Error","Disclosure","name","captureStackTrace","DisclosureAPIContext","useDisclosureAPIContext","DisclosurePanelContext","useDisclosurePanelContext","stateReducer","type","DEFAULT_DISCLOSURE_TAG","Fragment","props","defaultOpen","passthroughProps","useId","reducerBag","useReducer","dispatch","useEffect","close","useCallback","focusableElement","restoreElement","document","getElementById","HTMLElement","current","focus","api","useMemo","slot","open","Provider","value","OpenClosedProvider","State","render","defaultTag","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","ref","join","internalButtonRef","useRef","buttonRef","useSyncRefs","panelContext","isWithinPanel","handleKeyDown","event","key","Keys","Space","Enter","preventDefault","stopPropagation","handleKeyUp","handleClick","isDisabledReactIssue7711","currentTarget","disabled","useResolveButtonType","propsWeControl","onKeyDown","onClick","id","undefined","onKeyUp","DEFAULT_PANEL_TAG","PanelRenderFeatures","Features","RenderStrategy","Static","Panel","panelRef","usesOpenClosedState","useOpenClosed","visible","unmount","features"],"mappings":"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","sourcesContent":["// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n  let buttonRef = useSyncRefs(internalButtonRef, ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n"]},"metadata":{},"sourceType":"module"}