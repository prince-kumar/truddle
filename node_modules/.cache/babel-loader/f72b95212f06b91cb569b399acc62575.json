{"ast":null,"code":"import _objectSpread from\"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{letters,status}from'./constants';import{useEffect,useState}from'react';import{EndGameModal}from'./components/EndGameModal';import{InfoModal}from'./components/InfoModal';import{Keyboard}from'./components/Keyboard';import{SettingsModal}from'./components/SettingsModal';import answers from'./data/answers';import{useLocalStorage}from'./hooks/useLocalStorage';import{ReactComponent as Info}from'./data/Info.svg';import{ReactComponent as Settings}from'./data/Settings.svg';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var words=require('./data/words').default;var state={playing:'playing',won:'won',lost:'lost'};export var difficulty={easy:'easy',normal:'normal',hard:'hard'};var getRandomAnswer=function getRandomAnswer(){var randomIndex=Math.floor(Math.random()*answers.length);return answers[randomIndex].toUpperCase();};function App(){var initialStates={questions:[\"guess the city \",\"Guess the river name \",\"Guess the food name\"],answer:function answer(){return getRandomAnswer();},gameState:state.playing,board:[['','','','',''],['','','','',''],['','','','',''],['','','','',''],['','','','',''],['','','','','']],cellStatuses:Array(6).fill(Array(5).fill(status.unguessed)),currentRow:0,currentCol:0,letterStatuses:function letterStatuses(){var letterStatuses={};letters.forEach(function(letter){letterStatuses[letter]=status.unguessed;});return letterStatuses;},submittedInvalidWord:false,darkMode:window.matchMedia('(prefers-color-scheme: dark)').matches};var _useLocalStorage=useLocalStorage('stateAnswer',initialStates.answer()),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),answer=_useLocalStorage2[0],setAnswer=_useLocalStorage2[1];var _useState=useState(initialStates.questions[Math.floor(Math.random()*initialStates.questions.length)]),_useState2=_slicedToArray(_useState,2),question=_useState2[0],setQuestion=_useState2[1];var _useLocalStorage3=useLocalStorage('stateGameState',initialStates.gameState),_useLocalStorage4=_slicedToArray(_useLocalStorage3,2),gameState=_useLocalStorage4[0],setGameState=_useLocalStorage4[1];var _useLocalStorage5=useLocalStorage('stateBoard',initialStates.board),_useLocalStorage6=_slicedToArray(_useLocalStorage5,2),board=_useLocalStorage6[0],setBoard=_useLocalStorage6[1];var _useLocalStorage7=useLocalStorage('stateCellStatuses',initialStates.cellStatuses),_useLocalStorage8=_slicedToArray(_useLocalStorage7,2),cellStatuses=_useLocalStorage8[0],setCellStatuses=_useLocalStorage8[1];var _useLocalStorage9=useLocalStorage('stateCurrentRow',initialStates.currentRow),_useLocalStorage10=_slicedToArray(_useLocalStorage9,2),currentRow=_useLocalStorage10[0],setCurrentRow=_useLocalStorage10[1];var _useLocalStorage11=useLocalStorage('stateCurrentCol',initialStates.currentCol),_useLocalStorage12=_slicedToArray(_useLocalStorage11,2),currentCol=_useLocalStorage12[0],setCurrentCol=_useLocalStorage12[1];var _useLocalStorage13=useLocalStorage('stateLetterStatuses',initialStates.letterStatuses()),_useLocalStorage14=_slicedToArray(_useLocalStorage13,2),letterStatuses=_useLocalStorage14[0],setLetterStatuses=_useLocalStorage14[1];var _useLocalStorage15=useLocalStorage('stateSubmittedInvalidWord',initialStates.submittedInvalidWord),_useLocalStorage16=_slicedToArray(_useLocalStorage15,2),submittedInvalidWord=_useLocalStorage16[0],setSubmittedInvalidWord=_useLocalStorage16[1];var _useLocalStorage17=useLocalStorage('current-streak',0),_useLocalStorage18=_slicedToArray(_useLocalStorage17,2),currentStreak=_useLocalStorage18[0],setCurrentStreak=_useLocalStorage18[1];var _useLocalStorage19=useLocalStorage('longest-streak',0),_useLocalStorage20=_slicedToArray(_useLocalStorage19,2),longestStreak=_useLocalStorage20[0],setLongestStreak=_useLocalStorage20[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),modalIsOpen=_useState4[0],setIsOpen=_useState4[1];var _useLocalStorage21=useLocalStorage('first-time',true),_useLocalStorage22=_slicedToArray(_useLocalStorage21,2),firstTime=_useLocalStorage22[0],setFirstTime=_useLocalStorage22[1];var _useLocalStorage23=useLocalStorage('guesses-in-streak',firstTime?0:-1),_useLocalStorage24=_slicedToArray(_useLocalStorage23,2),guessesInStreak=_useLocalStorage24[0],setGuessesInStreak=_useLocalStorage24[1];var _useState5=useState(firstTime),_useState6=_slicedToArray(_useState5,2),infoModalIsOpen=_useState6[0],setInfoModalIsOpen=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),settingsModalIsOpen=_useState8[0],setSettingsModalIsOpen=_useState8[1];var _useLocalStorage25=useLocalStorage('difficulty',difficulty.normal),_useLocalStorage26=_slicedToArray(_useLocalStorage25,2),difficultyLevel=_useLocalStorage26[0],setDifficultyLevel=_useLocalStorage26[1];var getDifficultyLevelInstructions=function getDifficultyLevelInstructions(){if(difficultyLevel===difficulty.easy){return'Guess any 5 letters';}else if(difficultyLevel===difficulty.hard){return\"Guess any valid word using all the hints you've been given\";}else{return'Guess any valid word';}};var eg={};var _useLocalStorage27=useLocalStorage('exact-guesses',eg),_useLocalStorage28=_slicedToArray(_useLocalStorage27,2),exactGuesses=_useLocalStorage28[0],setExactGuesses=_useLocalStorage28[1];var openModal=function openModal(){return setIsOpen(true);};var closeModal=function closeModal(){return setIsOpen(false);};var handleInfoClose=function handleInfoClose(){setFirstTime(false);setInfoModalIsOpen(false);};var _useLocalStorage29=useLocalStorage('dark-mode',initialStates.darkMode),_useLocalStorage30=_slicedToArray(_useLocalStorage29,2),darkMode=_useLocalStorage30[0],setDarkMode=_useLocalStorage30[1];var toggleDarkMode=function toggleDarkMode(){return setDarkMode(function(prev){return!prev;});};useEffect(function(){return document.documentElement.classList[darkMode?'add':'remove']('dark');},[darkMode]);useEffect(function(){if(gameState!==state.playing){setTimeout(function(){openModal();},500);}},[gameState]);var getCellStyles=function getCellStyles(rowNumber,colNumber,letter){if(rowNumber===currentRow){if(letter){return\"nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark \".concat(submittedInvalidWord?'border border-red-800':'');}return'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';}switch(cellStatuses[rowNumber][colNumber]){case status.green:return'nm-inset-n-green text-gray-50';case status.yellow:return'nm-inset-yellow-500 text-gray-50';case status.gray:return'nm-inset-n-gray text-gray-50';default:return'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';}};var addLetter=function addLetter(letter){setSubmittedInvalidWord(false);setBoard(function(prev){if(currentCol>4){return prev;}var newBoard=_toConsumableArray(prev);newBoard[currentRow][currentCol]=letter;return newBoard;});if(currentCol<5){setCurrentCol(function(prev){return prev+1;});}};// returns an array with a boolean of if the word is valid and an error message if it is not\nvar isValidWord=function isValidWord(word){if(word.length<5)return[false,\"please enter a 5 letter word\"];if(difficultyLevel===difficulty.easy)return[true];if(!words[word.toLowerCase()])return[false,\"\".concat(word,\" is not a valid word. Please try again.\")];if(difficultyLevel===difficulty.normal)return[true];var guessedLetters=Object.entries(letterStatuses).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),letter=_ref2[0],letterStatus=_ref2[1];return[status.yellow,status.green].includes(letterStatus);});var yellowsUsed=guessedLetters.every(function(_ref3){var _ref4=_slicedToArray(_ref3,2),letter=_ref4[0],_=_ref4[1];return word.includes(letter);});var greensUsed=Object.entries(exactGuesses).every(function(_ref5){var _ref6=_slicedToArray(_ref5,2),position=_ref6[0],letter=_ref6[1];return word[parseInt(position)]===letter;});if(!yellowsUsed||!greensUsed)return[false,\"In hard mode, you must use all the hints you've been given.\"];return[true];};var onEnterPress=function onEnterPress(){var word=board[currentRow].join('');var _isValidWord=isValidWord(word),_isValidWord2=_slicedToArray(_isValidWord,2),valid=_isValidWord2[0],_err=_isValidWord2[1];if(!valid){console.log({valid:valid,_err:_err});setSubmittedInvalidWord(true);// alert(_err)\nreturn;}if(currentRow===6)return;updateCellStatuses(word,currentRow);updateLetterStatuses(word);setCurrentRow(function(prev){return prev+1;});setCurrentCol(0);// Only calculate guesses in streak if they've\n// started a new streak since this feature was added.\nif(guessesInStreak>=0){setGuessesInStreak(function(prev){return prev+1;});}};var onDeletePress=function onDeletePress(){setSubmittedInvalidWord(false);if(currentCol===0)return;setBoard(function(prev){var newBoard=_toConsumableArray(prev);newBoard[currentRow][currentCol-1]='';return newBoard;});setCurrentCol(function(prev){return prev-1;});};var updateCellStatuses=function updateCellStatuses(word,rowNumber){var fixedLetters={};setCellStatuses(function(prev){var newCellStatuses=_toConsumableArray(prev);newCellStatuses[rowNumber]=_toConsumableArray(prev[rowNumber]);var wordLength=word.length;var answerLetters=answer.split('');// set all to gray\nfor(var i=0;i<wordLength;i++){newCellStatuses[rowNumber][i]=status.gray;}// check greens\nfor(var _i=wordLength-1;_i>=0;_i--){if(word[_i]===answer[_i]){newCellStatuses[rowNumber][_i]=status.green;answerLetters.splice(_i,1);fixedLetters[_i]=answer[_i];}}// check yellows\nfor(var _i2=0;_i2<wordLength;_i2++){if(answerLetters.includes(word[_i2])&&newCellStatuses[rowNumber][_i2]!==status.green){newCellStatuses[rowNumber][_i2]=status.yellow;answerLetters.splice(answerLetters.indexOf(word[_i2]),1);}}return newCellStatuses;});setExactGuesses(function(prev){return _objectSpread(_objectSpread({},prev),fixedLetters);});};var isRowAllGreen=function isRowAllGreen(row){return row.every(function(cell){return cell===status.green;});};var avgGuessesPerGame=function avgGuessesPerGame(){if(currentStreak>0){return guessesInStreak/currentStreak;}else{return 0;}};// every time cellStatuses updates, check if the game is won or lost\nuseEffect(function(){var cellStatusesCopy=_toConsumableArray(cellStatuses);var reversedStatuses=cellStatusesCopy.reverse();var lastFilledRow=reversedStatuses.find(function(r){return r[0]!==status.unguessed;});if(gameState===state.playing&&lastFilledRow&&isRowAllGreen(lastFilledRow)){setGameState(state.won);var streak=currentStreak+1;setCurrentStreak(streak);setLongestStreak(function(prev){return streak>prev?streak:prev;});}else if(gameState===state.playing&&currentRow===6){setGameState(state.lost);setCurrentStreak(0);}},[cellStatuses,currentRow,gameState,setGameState,currentStreak,setCurrentStreak,setLongestStreak]);var updateLetterStatuses=function updateLetterStatuses(word){setLetterStatuses(function(prev){var newLetterStatuses=_objectSpread({},prev);var wordLength=word.length;for(var i=0;i<wordLength;i++){if(newLetterStatuses[word[i]]===status.green)continue;if(word[i]===answer[i]){newLetterStatuses[word[i]]=status.green;}else if(answer.includes(word[i])){newLetterStatuses[word[i]]=status.yellow;}else{newLetterStatuses[word[i]]=status.gray;}}return newLetterStatuses;});};var playAgain=function playAgain(){if(gameState===state.lost){setGuessesInStreak(0);}setAnswer(initialStates.answer());setGameState(initialStates.gameState);setBoard(initialStates.board);setCellStatuses(initialStates.cellStatuses);setCurrentRow(initialStates.currentRow);setCurrentCol(initialStates.currentCol);setLetterStatuses(initialStates.letterStatuses());setSubmittedInvalidWord(initialStates.submittedInvalidWord);setExactGuesses({});closeModal();};var modalStyles={overlay:{position:'fixed',top:0,left:0,right:0,bottom:0,backgroundColor:darkMode?'hsl(231, 16%, 25%)':'hsl(231, 16%, 92%)',zIndex:99},content:{top:'50%',left:'50%',right:'auto',bottom:'auto',transform:'translate(-50%, -50%)',height:'calc(100% - 2rem)',width:'calc(100% - 2rem)',backgroundColor:darkMode?'hsl(231, 16%, 25%)':'hsl(231, 16%, 92%)',boxShadow:\"\".concat(darkMode?'0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C':'0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'),border:'none',borderRadius:'1rem',maxWidth:'475px',maxHeight:'650px',position:'relative'}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col justify-between h-fill bg-background dark:bg-background-dark\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"flex flex-row justify-between py-2 px-3 text-primary dark:text-primary-dark\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return setSettingsModalIsOpen(true);},className:\"p-1 rounded-full\",children:/*#__PURE__*/_jsx(Settings,{})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\" text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\",children:\"Truddle\"}),/*#__PURE__*/_jsx(\"h2\",{className:\" text-center text-xl tracking-wide font-bold font-righteous mt-3\",children:question})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return setInfoModalIsOpen(true);},className:\"p-1 rounded-full\",children:/*#__PURE__*/_jsx(Info,{})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center flex-col py-3 flex-1 justify-center relative\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-5 grid-flow-row gap-4\",children:board.map(function(row,rowNumber){return row.map(function(letter,colNumber){return/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(getCellStyles(rowNumber,colNumber,letter),\" inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full\"),children:letter},colNumber);});})}),/*#__PURE__*/_jsx(\"div\",{className:\"absolute -bottom-24 left-1/2 transform -translate-x-1/2 \".concat(gameState===state.playing?'hidden':''),children:/*#__PURE__*/_jsx(\"div\",{className:darkMode?'dark':'',children:/*#__PURE__*/_jsx(\"button\",{autoFocus:true,type:\"button\",className:\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\",onClick:playAgain,children:\"Play Again\"})})})]})}),/*#__PURE__*/_jsx(InfoModal,{isOpen:infoModalIsOpen,handleClose:handleInfoClose,darkMode:darkMode,styles:modalStyles}),/*#__PURE__*/_jsx(EndGameModal,{isOpen:modalIsOpen,handleClose:closeModal,styles:modalStyles,darkMode:darkMode,gameState:gameState,state:state,currentStreak:currentStreak,longestStreak:longestStreak,answer:answer,playAgain:playAgain,avgGuessesPerGame:avgGuessesPerGame()}),/*#__PURE__*/_jsx(SettingsModal,{isOpen:settingsModalIsOpen,handleClose:function handleClose(){return setSettingsModalIsOpen(false);},styles:modalStyles,darkMode:darkMode,toggleDarkMode:toggleDarkMode,difficultyLevel:difficultyLevel,setDifficultyLevel:setDifficultyLevel,levelInstructions:getDifficultyLevelInstructions()}),/*#__PURE__*/_jsx(\"div\",{className:\"h-auto relative \".concat(gameState===state.playing?'':'invisible'),children:/*#__PURE__*/_jsx(Keyboard,{letterStatuses:letterStatuses,addLetter:addLetter,onEnterPress:onEnterPress,onDeletePress:onDeletePress,gameDisabled:gameState!==state.playing})})]})});}export default App;","map":{"version":3,"names":["letters","status","useEffect","useState","EndGameModal","InfoModal","Keyboard","SettingsModal","answers","useLocalStorage","ReactComponent","Info","Settings","jsx","_jsx","jsxs","_jsxs","words","require","default","state","playing","won","lost","difficulty","easy","normal","hard","getRandomAnswer","randomIndex","Math","floor","random","length","toUpperCase","App","initialStates","questions","answer","gameState","board","cellStatuses","Array","fill","unguessed","currentRow","currentCol","letterStatuses","forEach","letter","submittedInvalidWord","darkMode","window","matchMedia","matches","_useLocalStorage","_useLocalStorage2","_slicedToArray","setAnswer","_useState","_useState2","question","setQuestion","_useLocalStorage3","_useLocalStorage4","setGameState","_useLocalStorage5","_useLocalStorage6","setBoard","_useLocalStorage7","_useLocalStorage8","setCellStatuses","_useLocalStorage9","_useLocalStorage10","setCurrentRow","_useLocalStorage11","_useLocalStorage12","setCurrentCol","_useLocalStorage13","_useLocalStorage14","setLetterStatuses","_useLocalStorage15","_useLocalStorage16","setSubmittedInvalidWord","_useLocalStorage17","_useLocalStorage18","currentStreak","setCurrentStreak","_useLocalStorage19","_useLocalStorage20","longestStreak","setLongestStreak","_useState3","_useState4","modalIsOpen","setIsOpen","_useLocalStorage21","_useLocalStorage22","firstTime","setFirstTime","_useLocalStorage23","_useLocalStorage24","guessesInStreak","setGuessesInStreak","_useState5","_useState6","infoModalIsOpen","setInfoModalIsOpen","_useState7","_useState8","settingsModalIsOpen","setSettingsModalIsOpen","_useLocalStorage25","_useLocalStorage26","difficultyLevel","setDifficultyLevel","getDifficultyLevelInstructions","eg","_useLocalStorage27","_useLocalStorage28","exactGuesses","setExactGuesses","openModal","closeModal","handleInfoClose","_useLocalStorage29","_useLocalStorage30","setDarkMode","toggleDarkMode","prev","document","documentElement","classList","setTimeout","getCellStyles","rowNumber","colNumber","concat","green","yellow","gray","addLetter","newBoard","_toConsumableArray","isValidWord","word","toLowerCase","guessedLetters","Object","entries","filter","_ref","_ref2","letterStatus","includes","yellowsUsed","every","_ref3","_ref4","_","greensUsed","_ref5","_ref6","position","parseInt","onEnterPress","join","_isValidWord","_isValidWord2","valid","_err","console","log","updateCellStatuses","updateLetterStatuses","onDeletePress","fixedLetters","newCellStatuses","wordLength","answerLetters","split","i","splice","indexOf","_objectSpread","isRowAllGreen","row","cell","avgGuessesPerGame","cellStatusesCopy","reversedStatuses","reverse","lastFilledRow","find","r","streak","newLetterStatuses","playAgain","modalStyles","overlay","top","left","right","bottom","backgroundColor","zIndex","content","transform","height","width","boxShadow","border","borderRadius","maxWidth","maxHeight","children","className","type","onClick","map","autoFocus","isOpen","handleClose","styles","levelInstructions","gameDisabled"],"sources":["/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/src/App.tsx"],"sourcesContent":["import { letters, status } from './constants'\nimport { useEffect, useState } from 'react'\n\nimport { EndGameModal } from './components/EndGameModal'\nimport { InfoModal } from './components/InfoModal'\nimport { Keyboard } from './components/Keyboard'\nimport { SettingsModal } from './components/SettingsModal'\nimport answers from './data/answers'\nimport { useLocalStorage } from './hooks/useLocalStorage'\nimport { ReactComponent as Info } from './data/Info.svg'\nimport { ReactComponent as Settings } from './data/Settings.svg'\nconst words = require('./data/words').default as { [key: string]: boolean }\n\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost',\n}\n\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard',\n}\n\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length)\n  return answers[randomIndex].toUpperCase()\n}\n\ntype State = {\n  answer: () => string\n  questions: string[]\n  gameState: string\n  board: string[][]\n  cellStatuses: string[][]\n  currentRow: number\n  currentCol: number\n  letterStatuses: () => { [key: string]: string }\n  submittedInvalidWord: boolean\n  darkMode: boolean\n}\n\nfunction App() {\n  const initialStates: State = {\n\n    questions: [\"guess the city \", \"Guess the river name \",\"Guess the food name\"], \n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n    ],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses: { [key: string]: string } = {}\n      letters.forEach((letter) => {\n        letterStatuses[letter] = status.unguessed\n      })\n      return letterStatuses\n    },\n    submittedInvalidWord: false,\n    darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n  }\n\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer())\n  const [question, setQuestion] = useState(initialStates.questions[Math.floor(Math.random()*initialStates.questions.length)]);\n  \n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState)\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board)\n  const [cellStatuses, setCellStatuses] = useLocalStorage(\n    'stateCellStatuses',\n    initialStates.cellStatuses\n  )\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow)\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol)\n  const [letterStatuses, setLetterStatuses] = useLocalStorage(\n    'stateLetterStatuses',\n    initialStates.letterStatuses()\n  )\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage(\n    'stateSubmittedInvalidWord',\n    initialStates.submittedInvalidWord\n  )\n\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0)\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0)\n  const [modalIsOpen, setIsOpen] = useState(false)\n\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true)\n  const [guessesInStreak, setGuessesInStreak] = useLocalStorage(\n    'guesses-in-streak',\n    firstTime ? 0 : -1\n  )\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime)\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false)\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal)\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters'\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\"\n    } else {\n      return 'Guess any valid word'\n    }\n  }\n  const eg: { [key: number]: string } = {}\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  const handleInfoClose = () => {\n    setFirstTime(false)\n    setInfoModalIsOpen(false)\n  }\n\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', initialStates.darkMode)\n  const toggleDarkMode = () => setDarkMode((prev: boolean) => !prev)\n\n  useEffect(\n    () => document.documentElement.classList[darkMode ? 'add' : 'remove']('dark'),\n    [darkMode]\n  )\n\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal()\n      }, 500)\n    }\n  }, [gameState])\n\n  const getCellStyles = (rowNumber: number, colNumber: number, letter: string) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${\n          submittedInvalidWord ? 'border border-red-800' : ''\n        }`\n      }\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50'\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50'\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50'\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n  }\n\n  const addLetter = (letter: string) => {\n    setSubmittedInvalidWord(false)\n    setBoard((prev: string[][]) => {\n      if (currentCol > 4) {\n        return prev\n      }\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol] = letter\n      return newBoard\n    })\n    if (currentCol < 5) {\n      setCurrentCol((prev: number) => prev + 1)\n    }\n  }\n\n  // returns an array with a boolean of if the word is valid and an error message if it is not\n  const isValidWord = (word: string): [boolean] | [boolean, string] => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`]\n    if (difficultyLevel === difficulty.easy) return [true]\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`]\n    if (difficultyLevel === difficulty.normal) return [true]\n    const guessedLetters = Object.entries(letterStatuses).filter(([letter, letterStatus]) =>\n      [status.yellow, status.green].includes(letterStatus)\n    )\n    const yellowsUsed = guessedLetters.every(([letter, _]) => word.includes(letter))\n    const greensUsed = Object.entries(exactGuesses).every(\n      ([position, letter]) => word[parseInt(position)] === letter\n    )\n    if (!yellowsUsed || !greensUsed)\n      return [false, `In hard mode, you must use all the hints you've been given.`]\n    return [true]\n  }\n\n  const onEnterPress = () => {\n    const word = board[currentRow].join('')\n    const [valid, _err] = isValidWord(word)\n    if (!valid) {\n      console.log({ valid, _err })\n      setSubmittedInvalidWord(true)\n      // alert(_err)\n      return\n    }\n\n    if (currentRow === 6) return\n\n    updateCellStatuses(word, currentRow)\n    updateLetterStatuses(word)\n    setCurrentRow((prev: number) => prev + 1)\n    setCurrentCol(0)\n\n    // Only calculate guesses in streak if they've\n    // started a new streak since this feature was added.\n    if (guessesInStreak >= 0) {\n      setGuessesInStreak((prev: number) => prev + 1)\n    }\n  }\n\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false)\n    if (currentCol === 0) return\n\n    setBoard((prev: any) => {\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol - 1] = ''\n      return newBoard\n    })\n\n    setCurrentCol((prev: number) => prev - 1)\n  }\n\n  const updateCellStatuses = (word: string, rowNumber: number) => {\n    const fixedLetters: { [key: number]: string } = {}\n    setCellStatuses((prev: any) => {\n      const newCellStatuses = [...prev]\n      newCellStatuses[rowNumber] = [...prev[rowNumber]]\n      const wordLength = word.length\n      const answerLetters: string[] = answer.split('')\n\n      // set all to gray\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray\n      }\n\n      // check greens\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green\n          answerLetters.splice(i, 1)\n          fixedLetters[i] = answer[i]\n        }\n      }\n\n      // check yellows\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1)\n        }\n      }\n\n      return newCellStatuses\n    })\n    setExactGuesses((prev: { [key: number]: string }) => ({ ...prev, ...fixedLetters }))\n  }\n\n  const isRowAllGreen = (row: string[]) => {\n    return row.every((cell: string) => cell === status.green)\n  }\n\n  const avgGuessesPerGame = (): number => {\n    if (currentStreak > 0) {\n      return guessesInStreak / currentStreak\n    } else {\n      return 0\n    }\n  }\n\n  // every time cellStatuses updates, check if the game is won or lost\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses]\n    const reversedStatuses = cellStatusesCopy.reverse()\n    const lastFilledRow = reversedStatuses.find((r) => {\n      return r[0] !== status.unguessed\n    })\n\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won)\n\n      var streak = currentStreak + 1\n      setCurrentStreak(streak)\n      setLongestStreak((prev: number) => (streak > prev ? streak : prev))\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost)\n      setCurrentStreak(0)\n    }\n  }, [\n    cellStatuses,\n    currentRow,\n    gameState,\n    setGameState,\n    currentStreak,\n    setCurrentStreak,\n    setLongestStreak,\n  ])\n\n  const updateLetterStatuses = (word: string) => {\n    setLetterStatuses((prev: { [key: string]: string }) => {\n      const newLetterStatuses = { ...prev }\n      const wordLength = word.length\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue\n\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow\n        } else {\n          newLetterStatuses[word[i]] = status.gray\n        }\n      }\n      return newLetterStatuses\n    })\n  }\n\n  const playAgain = () => {\n    if (gameState === state.lost) {\n      setGuessesInStreak(0)\n    }\n\n    setAnswer(initialStates.answer())\n    setGameState(initialStates.gameState)\n    setBoard(initialStates.board)\n    setCellStatuses(initialStates.cellStatuses)\n    setCurrentRow(initialStates.currentRow)\n    setCurrentCol(initialStates.currentCol)\n    setLetterStatuses(initialStates.letterStatuses())\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord)\n    setExactGuesses({})\n\n    closeModal()\n  }\n\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99,\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${\n        darkMode\n          ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C'\n          : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'\n      }`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative',\n    },\n  }\n\n  return (\n    <div>\n      <div className={`flex flex-col justify-between h-fill bg-background dark:bg-background-dark`}>\n        <header className=\"flex flex-row justify-between py-2 px-3 text-primary dark:text-primary-dark\">\n          <button\n            type=\"button\"\n            onClick={() => setSettingsModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Settings />\n          </button>\n          <div>\n\n          <h1 className=\" text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\">\n            Truddle\n          </h1>\n          <h2 className=\" text-center text-xl tracking-wide font-bold font-righteous mt-3\">\n          { question}\n          </h2>\n            \n          </div>\n \n          <button\n            type=\"button\"\n            onClick={() => setInfoModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Info />\n          </button>\n        </header>\n        <div className=\"flex items-center flex-col py-3 flex-1 justify-center relative\">\n          <div className=\"relative\">\n            <div className=\"grid grid-cols-5 grid-flow-row gap-4\">\n              {board.map((row: string[], rowNumber: number) =>\n                row.map((letter: string, colNumber: number) => (\n                  <span\n                    key={colNumber}\n                    className={`${getCellStyles(\n                      rowNumber,\n                      colNumber,\n                      letter\n                    )} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`}\n                  >\n                    {letter}\n                  </span>\n                ))\n              )}\n            </div>\n            <div\n              className={`absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${\n                gameState === state.playing ? 'hidden' : ''\n              }`}\n            >\n              <div className={darkMode ? 'dark' : ''}>\n                <button\n                  autoFocus\n                  type=\"button\"\n                  className=\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\"\n                  onClick={playAgain}\n                >\n                  Play Again\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <InfoModal\n          isOpen={infoModalIsOpen}\n          handleClose={handleInfoClose}\n          darkMode={darkMode}\n          styles={modalStyles}\n        />\n        <EndGameModal\n          isOpen={modalIsOpen}\n          handleClose={closeModal}\n          styles={modalStyles}\n          darkMode={darkMode}\n          gameState={gameState}\n          state={state}\n          currentStreak={currentStreak}\n          longestStreak={longestStreak}\n          answer={answer}\n          playAgain={playAgain}\n          avgGuessesPerGame={avgGuessesPerGame()}\n        />\n        <SettingsModal\n          isOpen={settingsModalIsOpen}\n          handleClose={() => setSettingsModalIsOpen(false)}\n          styles={modalStyles}\n          darkMode={darkMode}\n          toggleDarkMode={toggleDarkMode}\n          difficultyLevel={difficultyLevel}\n          setDifficultyLevel={setDifficultyLevel}\n          levelInstructions={getDifficultyLevelInstructions()}\n        />\n        <div className={`h-auto relative ${gameState === state.playing ? '' : 'invisible'}`}>\n          <Keyboard\n            letterStatuses={letterStatuses}\n            addLetter={addLetter}\n            onEnterPress={onEnterPress}\n            onDeletePress={onDeletePress}\n            gameDisabled={gameState !== state.playing}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}