{"ast":null,"code":"import { useState } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\nfunction resolveType(props) {\n  var _props$as;\n  if (props.type) return props.type;\n  var tag = (_props$as = props.as) != null ? _props$as : 'button';\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button';\n  return undefined;\n}\nfunction useResolveButtonType(props, ref) {\n  var _useState = useState(function () {\n      return resolveType(props);\n    }),\n    type = _useState[0],\n    setType = _useState[1];\n  useIsoMorphicEffect(function () {\n    setType(resolveType(props));\n  }, [props.type, props.as]);\n  useIsoMorphicEffect(function () {\n    if (type) return;\n    if (!ref.current) return;\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button');\n    }\n  }, [type, ref]);\n  return type;\n}\nexport { useResolveButtonType };","map":{"version":3,"sources":["/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/word-master/node_modules/@headlessui/react/src/hooks/use-resolve-button-type.ts"],"names":["resolveType","props","type","tag","as","toLowerCase","undefined","useResolveButtonType","ref","setType","useState","useIsoMorphicEffect","current","HTMLButtonElement","hasAttribute"],"mappings":";;AAIA,SAASA,WAAT,CAA2BC,KAA3B,EAAA;;EACE,IAAIA,KAAK,CAACC,IAAV,EAAgB,OAAOD,KAAK,CAACC,IAAb;EAEhB,IAAIC,GAAG,GAAA,CAAA,SAAA,GAAGF,KAAK,CAACG,EAAT,KAAA,IAAA,GAAA,SAAA,GAAe,QAAtB;EACA,IAAI,OAAOD,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACE,WAAJF,CAAAA,CAAAA,KAAsB,QAArD,EAA+D,OAAO,QAAP;EAE/D,OAAOG,SAAP;AACD;SAEeC,oBAAAA,CACdN,KAAAA,EACAO,GAAAA,EAAAA;kBAEsBE,QAAQ,CAAC,YAAA;MAAA,OAAMV,WAAW,CAACC,KAAD,CAAjB;IAAA,CAAD,CAAA;IAAzBC,IAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA;IAAMO,OAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA;EAEXE,mBAAmB,CAAC,YAAA;IAClBF,OAAO,CAACT,WAAW,CAACC,KAAD,CAAZ,CAAPQ;EACD,CAFkB,EAEhB,CAACR,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACG,EAAnB,CAFgB,CAAnBO;EAIAA,mBAAmB,CAAC,YAAA;IAClB,IAAIT,IAAJ,EAAU;IACV,IAAI,CAACM,GAAG,CAACI,OAAT,EAAkB;IAElB,IAAIJ,GAAG,CAACI,OAAJJ,YAAuBK,iBAAvBL,IAA4C,CAACA,GAAG,CAACI,OAAJJ,CAAYM,YAAZN,CAAyB,MAAzBA,CAAjD,EAAmF;MACjFC,OAAO,CAAC,QAAD,CAAPA;IACD;EACF,CAPkB,EAOhB,CAACP,IAAD,EAAOM,GAAP,CAPgB,CAAnBG;EASA,OAAOT,IAAP;AACD","sourcesContent":["import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n"]},"metadata":{},"sourceType":"module"}