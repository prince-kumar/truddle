{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useContext, useRef, useCallback, useMemo, createContext, useState, Fragment } from 'react';\nimport { render } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { Description, useDescriptions } from '../description/description.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\nimport { Label, useLabels } from '../label/label.esm.js';\nvar GroupContext = /*#__PURE__*/createContext(null);\nGroupContext.displayName = 'GroupContext'; // ---\n\nvar DEFAULT_GROUP_TAG = Fragment;\nfunction Group(props) {\n  var _useState = useState(null),\n    switchElement = _useState[0],\n    setSwitchElement = _useState[1];\n  var _useLabels = useLabels(),\n    labelledby = _useLabels[0],\n    LabelProvider = _useLabels[1];\n  var _useDescriptions = useDescriptions(),\n    describedby = _useDescriptions[0],\n    DescriptionProvider = _useDescriptions[1];\n  var context = useMemo(function () {\n    return {\n      \"switch\": switchElement,\n      setSwitch: setSwitchElement,\n      labelledby: labelledby,\n      describedby: describedby\n    };\n  }, [switchElement, setSwitchElement, labelledby, describedby]);\n  return React.createElement(DescriptionProvider, {\n    name: \"Switch.Description\"\n  }, React.createElement(LabelProvider, {\n    name: \"Switch.Label\",\n    props: {\n      onClick: function onClick() {\n        if (!switchElement) return;\n        switchElement.click();\n        switchElement.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, React.createElement(GroupContext.Provider, {\n    value: context\n  }, render({\n    props: props,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Switch.Group'\n  }))));\n} // ---\n\nvar DEFAULT_SWITCH_TAG = 'button';\nfunction Switch(props) {\n  var checked = props.checked,\n    onChange = props.onChange,\n    passThroughProps = _objectWithoutPropertiesLoose(props, [\"checked\", \"onChange\"]);\n  var id = \"headlessui-switch-\" + useId();\n  var groupContext = useContext(GroupContext);\n  var internalSwitchRef = useRef(null);\n  var switchRef = useSyncRefs(internalSwitchRef, groupContext === null ? null : groupContext.setSwitch);\n  var toggle = useCallback(function () {\n    return onChange(!checked);\n  }, [onChange, checked]);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    event.preventDefault();\n    toggle();\n  }, [toggle]);\n  var handleKeyUp = useCallback(function (event) {\n    if (event.key !== Keys.Tab) event.preventDefault();\n    if (event.key === Keys.Space) toggle();\n  }, [toggle]); // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n\n  var handleKeyPress = useCallback(function (event) {\n    return event.preventDefault();\n  }, []);\n  var slot = useMemo(function () {\n    return {\n      checked: checked\n    };\n  }, [checked]);\n  var propsWeControl = {\n    id: id,\n    ref: switchRef,\n    role: 'switch',\n    type: useResolveButtonType(props, internalSwitchRef),\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext == null ? void 0 : groupContext.labelledby,\n    'aria-describedby': groupContext == null ? void 0 : groupContext.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress\n  };\n  return render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch'\n  });\n} // ---\n\nSwitch.Group = Group;\nSwitch.Label = Label;\nSwitch.Description = Description;\nexport { Switch };","map":{"version":3,"sources":["/Users/prince.kumar/Documents/Niyo-Dev/Games/travel-wordle/truddle/node_modules/@headlessui/react/src/components/switch/switch.tsx"],"names":["GroupContext","createContext","displayName","DEFAULT_GROUP_TAG","Fragment","Group","props","switchElement","setSwitchElement","useState","labelledby","LabelProvider","useLabels","describedby","DescriptionProvider","useDescriptions","context","useMemo","setSwitch","name","onClick","click","focus","preventScroll","Provider","value","render","defaultTag","DEFAULT_SWITCH_TAG","Switch","checked","onChange","passThroughProps","id","useId","groupContext","useContext","internalSwitchRef","useRef","switchRef","useSyncRefs","toggle","useCallback","handleClick","event","isDisabledReactIssue7711","currentTarget","preventDefault","handleKeyUp","key","Keys","Tab","Space","handleKeyPress","slot","propsWeControl","ref","role","type","useResolveButtonType","tabIndex","onKeyUp","onKeyPress","Label","Description"],"mappings":"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","sourcesContent":["import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  useRef,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { Label, useLabels } from '../label/label'\nimport { Description, useDescriptions } from '../description/description'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\n\ninterface StateDefinition {\n  switch: HTMLButtonElement | null\n  setSwitch(element: HTMLButtonElement): void\n  labelledby: string | undefined\n  describedby: string | undefined\n}\n\nlet GroupContext = createContext<StateDefinition | null>(null)\nGroupContext.displayName = 'GroupContext'\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: Props<TTag>) {\n  let [switchElement, setSwitchElement] = useState<HTMLButtonElement | null>(null)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let context = useMemo<StateDefinition>(\n    () => ({ switch: switchElement, setSwitch: setSwitchElement, labelledby, describedby }),\n    [switchElement, setSwitchElement, labelledby, describedby]\n  )\n\n  return (\n    <DescriptionProvider name=\"Switch.Description\">\n      <LabelProvider\n        name=\"Switch.Label\"\n        props={{\n          onClick() {\n            if (!switchElement) return\n            switchElement.click()\n            switchElement.focus({ preventScroll: true })\n          },\n        }}\n      >\n        <GroupContext.Provider value={context}>\n          {render({ props, defaultTag: DEFAULT_GROUP_TAG, name: 'Switch.Group' })}\n        </GroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nlet DEFAULT_SWITCH_TAG = 'button' as const\ninterface SwitchRenderPropArg {\n  checked: boolean\n}\ntype SwitchPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-checked'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onClick'\n  | 'onKeyUp'\n  | 'onKeyPress'\n\nexport function Switch<TTag extends ElementType = typeof DEFAULT_SWITCH_TAG>(\n  props: Props<TTag, SwitchRenderPropArg, SwitchPropsWeControl | 'checked' | 'onChange'> & {\n    checked: boolean\n    onChange(checked: boolean): void\n  }\n) {\n  let { checked, onChange, ...passThroughProps } = props\n  let id = `headlessui-switch-${useId()}`\n  let groupContext = useContext(GroupContext)\n  let internalSwitchRef = useRef<HTMLButtonElement | null>(null)\n  let switchRef = useSyncRefs(\n    internalSwitchRef,\n    groupContext === null ? null : groupContext.setSwitch\n  )\n\n  let toggle = useCallback(() => onChange(!checked), [onChange, checked])\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      toggle()\n    },\n    [toggle]\n  )\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      if (event.key !== Keys.Tab) event.preventDefault()\n      if (event.key === Keys.Space) toggle()\n    },\n    [toggle]\n  )\n\n  // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n  let handleKeyPress = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => event.preventDefault(),\n    []\n  )\n\n  let slot = useMemo<SwitchRenderPropArg>(() => ({ checked }), [checked])\n  let propsWeControl = {\n    id,\n    ref: switchRef,\n    role: 'switch',\n    type: useResolveButtonType(props, internalSwitchRef),\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext?.labelledby,\n    'aria-describedby': groupContext?.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress,\n  }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch',\n  })\n}\n\n// ---\n\nSwitch.Group = Group\nSwitch.Label = Label\nSwitch.Description = Description\n"]},"metadata":{},"sourceType":"module"}